name: iYield Protocol CI/CD

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
    tags: [ 'v*' ]

env:
  NODE_VERSION: '20'

jobs:
  contracts:
    name: Build & Test Contracts
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: contracts
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: contracts/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Compile contracts
        run: npx hardhat compile
        
      - name: Run tests
        run: npx hardhat test --reporter mocha
        
      - name: Generate coverage report
        run: npx hardhat coverage
        continue-on-error: true
        
      - name: Check contract sizes
        run: npx hardhat size-contracts
        continue-on-error: true
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: contract-artifacts
          path: |
            contracts/artifacts/**/*.json
            contracts/cache/**/*
          retention-days: 7

  frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Type check
        run: npm run type-check
        continue-on-error: true
        
      - name: Lint
        run: npm run lint
        continue-on-error: true
        
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_NETWORK: sepolia
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/out/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-testnet:
    name: Deploy to Testnets
    runs-on: ubuntu-latest
    needs: [contracts, frontend]
    if: startsWith(github.ref, 'refs/tags/v')
    
    defaults:
      run:
        working-directory: contracts
    
    strategy:
      matrix:
        network: [sepolia, base_sepolia, arbitrum_sepolia]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: contracts/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Deploy to ${{ matrix.network }}
        run: npx hardhat run scripts/deploy.js --network ${{ matrix.network }}
        env:
          SEPOLIA_RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}
          BASE_SEPOLIA_RPC_URL: ${{ secrets.BASE_SEPOLIA_RPC_URL }}
          ARB_SEPOLIA_RPC_URL: ${{ secrets.ARB_SEPOLIA_RPC_URL }}
          PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
          BASESCAN_API_KEY: ${{ secrets.BASESCAN_API_KEY }}
          ARBISCAN_API_KEY: ${{ secrets.ARBISCAN_API_KEY }}
          
      - name: Verify contracts on ${{ matrix.network }}
        run: |
          # Verification will be handled by the deploy script
          echo "Contracts deployed and verified on ${{ matrix.network }}"
        continue-on-error: true
        
      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-${{ matrix.network }}
          path: contracts/deployments/**/*.json
          retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [deploy-testnet]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Create release notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          cat > release_notes.md << 'EOF'
          # iYield Protocol $VERSION
          
          ## Highlights
          - ERC-RWA:CSV token with Compliance-by-Design™
          - Proof-of-CSV™ oracle (Merkle/IPFS attestations, multi-attestor)
          - Vault (LTV enforcement, stale-oracle guard, burn-on-redeem)
          - Tranche pool (senior/junior waterfall)
          - Next.js dashboard (NAV/oracle age/LTV headroom)
          - CI/CD + deploy scripts
          
          ## Addresses & ABIs
          See attached deployment artifacts and /deployments manifest in the repo.
          
          ## IP & Standards
          - Trademarks: iYield™, Proof-of-CSV™, Compliance-by-Design™
          - Patents: provisionals filed; details in PATENTS.md
          - Standard: ERC-RWA:CSV (spec in /specs/erc-rwa-csv.md)
          
          ## Networks Deployed
          - Sepolia Testnet
          - Base Sepolia
          - Arbitrum Sepolia
          
          ## What's Changed
          - Complete protocol implementation
          - Professional dashboard interface
          - Automated CI/CD pipeline
          - Multi-network deployment support
          - Enhanced security and compliance features
          EOF
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-docs:
    name: Publish Documentation
    runs-on: ubuntu-latest
    needs: [frontend]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/out/
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: frontend/out
          cname: iyield.io
        
      - name: Update documentation
        run: |
          echo "Documentation published to GitHub Pages"