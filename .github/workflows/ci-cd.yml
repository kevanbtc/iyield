name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Smart Contract Testing and Security
  contracts-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install contract dependencies
      working-directory: ./contracts
      run: npm ci

    - name: Compile contracts
      working-directory: ./contracts
      run: npx hardhat compile

    - name: Run contract tests
      working-directory: ./contracts
      run: npm test

    - name: Generate test coverage
      working-directory: ./contracts
      run: npm run coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./contracts/coverage/lcov.info
        flags: contracts
        name: contracts-coverage

    - name: Contract size check
      working-directory: ./contracts
      run: npx hardhat size-contracts
      continue-on-error: true

    - name: Gas usage report
      working-directory: ./contracts
      run: REPORT_GAS=true npm test
      continue-on-error: true

  # Smart Contract Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: contracts-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      working-directory: ./contracts
      run: npm ci

    - name: Install Slither
      run: |
        pip3 install slither-analyzer
        pip3 install solc-select
        solc-select install 0.8.20
        solc-select use 0.8.20

    - name: Run Slither analysis
      working-directory: ./contracts
      run: |
        slither . --json slither-report.json || true
        # Convert to SARIF format for GitHub Security tab
        # slither . --sarif slither-results.sarif || true

    - name: Upload Slither results
      uses: actions/upload-artifact@v4
      with:
        name: slither-report
        path: contracts/slither-report.json

    # - name: Upload SARIF to GitHub Security
    #   uses: github/codeql-action/upload-sarif@v3
    #   with:
    #     sarif_file: contracts/slither-results.sarif

  # Frontend Testing and Building
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Type checking
      working-directory: ./frontend
      run: npx tsc --noEmit

    - name: Lint code
      working-directory: ./frontend
      run: npm run lint

    - name: Build application
      working-directory: ./frontend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/.next/

  # End-to-End Testing
  e2e-test:
    runs-on: ubuntu-latest
    needs: [contracts-test, frontend-test]
    
    services:
      hardhat-node:
        image: node:18
        options: --health-cmd="curl -f http://localhost:8545" --health-interval=30s --health-timeout=10s --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd contracts && npm ci
        cd ../frontend && npm ci

    - name: Start local blockchain
      working-directory: ./contracts
      run: |
        npx hardhat node &
        sleep 10

    - name: Deploy contracts to local network
      working-directory: ./contracts
      run: npx hardhat run scripts/deploy.js --network localhost

    - name: Start frontend server
      working-directory: ./frontend
      run: |
        npm run build
        npm start &
        sleep 10

    # - name: Run E2E tests
    #   working-directory: ./frontend
    #   run: npm run test:e2e

  # Security and Quality Checks
  quality-checks:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd contracts && npm ci
        cd ../frontend && npm ci

    # Code quality analysis with SonarCloud
    # - name: SonarCloud Scan
    #   uses: SonarSource/sonarcloud-github-action@master
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    # Dependency vulnerability scanning
    - name: Audit npm packages (contracts)
      working-directory: ./contracts
      run: npm audit --audit-level=moderate
      continue-on-error: true

    - name: Audit npm packages (frontend)
      working-directory: ./frontend
      run: npm audit --audit-level=moderate
      continue-on-error: true

    # License compliance check
    - name: License check
      run: |
        npm install -g license-checker
        cd contracts && license-checker --summary
        cd ../frontend && license-checker --summary

  # Build and Push Docker Images
  docker-build:
    runs-on: ubuntu-latest
    needs: [contracts-test, frontend-test, quality-checks]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment commands here
        # This could involve updating Kubernetes deployments,
        # calling deployment APIs, or other deployment mechanisms

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy contracts to mainnet
      if: contains(github.event.head_commit.message, '[deploy-contracts]')
      run: |
        echo "Deploying contracts to mainnet..."
        # Add mainnet deployment logic here
        # This should include additional security checks
    
    - name: Deploy frontend to production
      run: |
        echo "Deploying frontend to production..."
        # Add production deployment logic here

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  # Notification and Reporting
  notify:
    runs-on: ubuntu-latest
    needs: [contracts-test, frontend-test, security-scan, quality-checks]
    if: always()
    
    steps:
    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#dev-alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: Notify Discord on success
      if: success() && github.ref == 'refs/heads/main'
      run: |
        curl -H "Content-Type: application/json" \
             -d "{\"content\":\"âœ… iYield Protocol deployment successful! Commit: ${{ github.sha }}\"}" \
             ${{ secrets.DISCORD_WEBHOOK }}

# Additional workflow for scheduled security scans
---
name: Scheduled Security Scan

on:
  schedule:
    # Run security scan every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

jobs:
  scheduled-security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      working-directory: ./contracts
      run: npm ci

    - name: Run comprehensive security scan
      working-directory: ./contracts
      run: |
        # Install security tools
        npm install -g mythril
        pip3 install slither-analyzer
        
        # Run multiple security scanners
        slither . --json slither-weekly.json || true
        # mythril analyze contracts/ || true
        
        # Check for outdated dependencies
        npm audit --audit-level=low
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: weekly-security-scan
        path: |
          contracts/slither-weekly.json
          
    - name: Create security issue if vulnerabilities found
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Weekly Security Scan - Vulnerabilities Detected',
            body: `
            ðŸ”’ **Weekly Security Scan Alert**
            
            The automated security scan has detected potential vulnerabilities.
            
            **Date**: ${new Date().toISOString()}
            **Workflow**: ${context.workflow}
            **Run**: ${context.runNumber}
            
            Please review the scan results and address any issues found.
            
            ðŸ“‹ **Next Steps:**
            1. Download scan artifacts from workflow run
            2. Review reported vulnerabilities
            3. Create fixes for confirmed issues
            4. Update security documentation if needed
            
            This issue was created automatically.
            `,
            labels: ['security', 'automated', 'high-priority']
          })